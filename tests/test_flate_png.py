#! /usr/bin/env python
# encoding: utf-8
# A part of pdfrw (https://github.com/pmaupin/pdfrw)
# Copyright (C) 2006-2017 Patrick Maupin, Austin, Texas
#                    2017 Henddher Pedroza, Illinois
# MIT license -- See LICENSE.txt for details

'''
Run from the directory above like so:
python -m tests.test_pdfstring
'''


from pdfrw.uncompress import flate_png, flate_png_orig, flate_png_impl
from pdfrw.py23_diffs import zlib, xrange, from_array, convert_load, convert_store

import unittest
import base64
import array
import logging

def create_data(nc=1, nr=1, bpc=8, ncolors=1, filter_type=0):
    pixel_size = (bpc * ncolors + 7) // 8
    data = []
    for r in xrange(nr):
        data.append(filter_type if r > 0 else 0) # filter byte
        for c in xrange(nc * pixel_size):
            data.append(r * nc * pixel_size + c * pixel_size)
    data = array.array('B', data)
    logging.error("Data: %r" % (data))
    return data, nc, nr, bpc, ncolors

def prepend_data_with_filter(data, filter):
    a = array.array('B', data)
    a.insert(0, filter)
    return a

def print_data(data1, data2):
    if data1 is None:
        return
    for b1, b2 in zip(data1, data2):
        logging.error("%4d %4d" % (ord(b1), ord(b2)))
    if len(data1) != len(data2):
        logging.error("Mismatch lengths: %d %d" % (len(data1), len(data2)))

class TestFlatePNG(unittest.TestCase):
    
    def test_flate_png(self):
        b64 = 'AAAAAAD//wACAAA2AAAAAQAADwAAAgEAACcAAQL/AAAzAP8AAgAANgACAAEAAO8AAAABAAF1AAAAAgAANgADAAEAAfsAAAACAAA2AAQCAAAAAAABAgAAAAAAAQIAAAAAAAECAAAAAAABAgAAAAAAAQIAAAAAAAECAAAAAAABAQECBXx8AAIAAAGHAAAAAgAANgAMAAEDCcMAAAACAAA2AA0CAAAAAAABAgAAAAAAAQIAAAAAAAECAAAAAAABAgAAAAAAAQIAAAAAAAECAAAAAAABAgAAAAAAAQABBxI2AAAEAfn5AAAWAgAAAAAAAQIAAAAAAAECAAAAAAABAgAAAAAAAQIAAAAAAAECAAAAAAABAgAAAAAAAQIAAAAAAAEAAQ6fJgAAAAIAADYAHwIAAAAAAAECAAAAAAABAgAAAAAAAQIAAAAAAAECAAAAAAABAgAAAAAAAQABESDsAAAAAgAANgAmAAAAAAD//wIAAAAAAAACARp0hgEBAgAA/eAAAA=='
        predictor, columns, colors, bpc = (12, 6, 1, 8)

        data = base64.b64decode(b64)
        d1, error1 = flate_png_orig(data, predictor, columns, colors, bpc)

        assert d1 is None
        assert error1 is not None

        data = base64.b64decode(b64)
        d2, error2 = flate_png(data, predictor, columns, colors, bpc)

        assert d2 is not None
        assert error2 is None

    def test_flate_png_filter_0(self):
        # None filter
        data, nc, nr, bpc, ncolors = create_data(nc=5, nr=7, bpc=8, ncolors=4)
        d1, error1 = flate_png_orig(data, 12, nc, ncolors, bpc) 

        data, nc, nr, bpc, ncolors = create_data(nc=5, nr=7, bpc=8, ncolors=4)
        d2, error2 = flate_png(data, 12, nc, ncolors, bpc)

        print_data(d1, d2)
        assert d1 == d2 

    def test_flate_png_filter_1(self):
        # Sub filter
        data, nc, nr, bpc, ncolors = create_data(nc=2, nr=3, bpc=8, ncolors=4, filter_type=1)
        d1, error1 = flate_png_orig(data, 12, nc, ncolors, bpc) 

        data, nc, nr, bpc, ncolors = create_data(nc=2, nr=3, bpc=8, ncolors=4, filter_type=1)
        d2, error2 = flate_png(data, 12, nc, ncolors, bpc)

        print_data(d1, d2)
        #assert d1 == d2

    def test_flate_png_filter_2(self):
        # Up filter
        data, nc, nr, bpc, ncolors = create_data(nc=5, nr=7, bpc=8, ncolors=4, filter_type=2)
        d1, error1 = flate_png_orig(data, 12, nc, ncolors, bpc) 

        data, nc, nr, bpc, ncolors = create_data(nc=5, nr=7, bpc=8, ncolors=4, filter_type=2)
        d2, error2 = flate_png(data, 12, nc, ncolors, bpc)

        print_data(d1, d2)
        assert d1 == d2 

    def test_flate_png_filter_3(self):
        # Avg filter
        data, nc, nr, bpc, ncolors = create_data(nc=5, nr=7, bpc=8, ncolors=4, filter_type=3)
        d2, error2 = flate_png(data, 12, nc, ncolors, bpc)

        assert d2
        assert error2 is None

    def test_flate_png_filter_4(self):
        # Paeth filter
        data, nc, nr, bpc, ncolors = create_data(nc=5, nr=7, bpc=8, ncolors=4, filter_type=4)
        d2, error2 = flate_png(data, 12, nc, ncolors, bpc)

        assert d2
        assert error2 is None

    def test_alt_flate_png_filter_1(self):
        width = 32
        bit_depth = 8
        channels = 1
        color_type = 0
        pixel_depth = 8
        rowbytes = 32
        filter = 1
        data = [ 0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01, ]
        expected = [ 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f, ]

        dataf = prepend_data_with_filter(data, filter)
        result, error = flate_png_impl(dataf, 12, width, channels, bit_depth)

        assert error is None
        assert array.array('B', expected) == result

    def test_alt_flate_png_filter_2(self):
        width = 32
        bit_depth = 8
        channels = 3
        color_type = 2
        pixel_depth = 24
        rowbytes = 96
        filter = 2
        data = [ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ]
        expected = [ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, ]

        dataf = prepend_data_with_filter(data, filter)
        result, error = flate_png_impl(dataf, 12, width, channels, bit_depth)

        assert error is None
        assert array.array('B', expected) == result

    def test_alt_flate_png_filter_3(self):

        width = 32
        bit_depth = 8
        channels = 1
        color_type = 0
        pixel_depth = 8
        rowbytes = 32
        filter = 3
        data = [ 0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x69,0x02,0xe4,0xb5,0xc3,0xa1,0xff,0x31,0x51,0xcf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ]
        expected = [ 0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xe8,0xb5,0x7e,0x65,0x5a,0x46,0x61,0xa1,0xe1,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f, ]

        dataf = prepend_data_with_filter(data, filter)
        result, error = flate_png_impl(dataf, 12, width, channels, bit_depth)

        assert error is None
        assert array.array('B', expected) == result

        width = 32
        bit_depth = 8
        channels = 3
        color_type = 2
        pixel_depth = 24
        rowbytes = 96
        filter = 3
        data = [ 0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x69,0x69,0x69,0x02,0x02,0x02,0xe4,0xe4,0xe4,0xb5,0xb5,0xb5,0xd7,0xbb,0xbb,0xcf,0x8d,0x8d,0x28,0xed,0xed,0x35,0x2f,0x2f,0x48,0x56,0x56,0xca,0xd1,0xd1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, ]
        expected = [ 0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0xe8,0xe8,0xe8,0xb5,0xb5,0xb5,0x7e,0x7e,0x7e,0x65,0x65,0x65,0x6e,0x52,0x52,0x7e,0x2e,0x2e,0xa6,0x43,0x43,0xc7,0x90,0x90,0xeb,0xdd,0xdd,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f, ]

        dataf = prepend_data_with_filter(data, filter)
        result, error = flate_png_impl(dataf, 12, width, channels, bit_depth)

        assert error is None
        assert array.array('B', expected) == result

    def test_alt_flate_png_filter_4(self):
        width = 32
        bit_depth = 8
        channels = 1
        color_type = 0
        pixel_depth = 8
        rowbytes = 32
        filter = 4
        data = [ 0x20,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01, ]
        expected = [ 0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f, ]

        dataf = prepend_data_with_filter(data, filter)
        result, error = flate_png_impl(dataf, 12, width, channels, bit_depth)

        assert error is None
        assert array.array('B', expected) == result

        width = 32
        bit_depth = 8
        channels = 3
        color_type = 2
        pixel_depth = 24
        rowbytes = 96
        filter = 4
        data = [ 0x00,0x00,0xe0,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff, ]
        expected = [ 0xff,0xff,0xdf,0xff,0xff,0xde,0xff,0xff,0xdd,0xff,0xff,0xdc,0xff,0xff,0xdb,0xff,0xff,0xda,0xff,0xff,0xd9,0xff,0xff,0xd8,0xff,0xff,0xd7,0xff,0xff,0xd6,0xff,0xff,0xd5,0xff,0xff,0xd4,0xff,0xff,0xd3,0xff,0xff,0xd2,0xff,0xff,0xd1,0xff,0xff,0xd0,0xff,0xff,0xcf,0xff,0xff,0xce,0xff,0xff,0xcd,0xff,0xff,0xcc,0xff,0xff,0xcb,0xff,0xff,0xca,0xff,0xff,0xc9,0xff,0xff,0xc8,0xff,0xff,0xc7,0xff,0xff,0xc6,0xff,0xff,0xc5,0xff,0xff,0xc4,0xff,0xff,0xc3,0xff,0xff,0xc2,0xff,0xff,0xc1,0xff,0xff,0xc0, ]

        dataf = prepend_data_with_filter(data, filter)
        result, error = flate_png_impl(dataf, 12, width, channels, bit_depth)

        assert error is None
        assert array.array('B', expected) == result



def main():
    unittest.main()


if __name__ == '__main__':
    main()
